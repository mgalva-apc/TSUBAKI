@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model TSUBAKI.Models.ViewModel.UserModel
@{
    ViewBag.Title = "SignUp";
}
<head>
    <meta charset="utf-8">
    <link href="~/css/signup.css" rel="stylesheet"> 
</head>
<body>
    <div class="contentwrapper">
        <div class="extracontent">
            <p id="text1">Create</p>
            <p id="text2">an account.</p>
            <p id="subtext1">Join the ACMR Network and enjoy our services to the fullest.</p>
            <p id="text3">Already have an account?</p>
            <button type="button" id="loginbutt">
                <a id="tologin" asp-action="Login">Log in here.</a>
            </button>
        </div>
        <div class="signform">
            <div class="forminfo">
                <h2>SignUp</h2>
            </div>
            <div class="formproper">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                        <h6>Account Image:</h6>
                        <div id="formpic">
                            <input class="form-control form-control-lg"
                                id="selectAvatar"
                                type="file" />
                        </div>
                        <div class="container">
                            <div class="row">
                                <div class="col">
                                    <h6>Image Preview:</h6>
                                    <img class="img" id="avatar" />
                                </div>
                                <div class="col" hidden>
                                    <textarea id="textArea" name="ImageBase64" rows="30" cols="50"> </textarea> 
                                    <input type="hidden" id="hiddenImageBase64" name="AccountImage" value="" />
                                </div>
                                <div class="col" hidden>
                                    @Html.TextBoxFor(model => model.AccountImage, new { type = "file", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.AccountImage, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AccountUsername, htmlAttributes: new { @class =
                        "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AccountUsername, new { htmlAttributes = new {
                            @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AccountUsername, "", new { @class =
                            "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class =
                        "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.PasswordFor(model => model.Password, new { @class = "form-control"
                            } )
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class =
                            "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientFirstName, htmlAttributes: new { @class =
                        "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ClientFirstName, new { htmlAttributes = new {
                            @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ClientFirstName, "", new { @class = "text-danger"
                            })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientLastName, htmlAttributes: new { @class =
                        "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ClientLastName, new { htmlAttributes = new {
                            @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ClientLastName, "", new { @class =
                            "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                        @Html.LabelFor(model => model.AccountEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AccountEmail, new { htmlAttributes = new {@class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AccountEmail, "", new { @class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ClientAddress, new { htmlAttributes = new {@class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ClientAddress, "", new { @class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientConNum, htmlAttributes: new { @class ="control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ClientConNum, new { htmlAttributes = new {@class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ClientConNum, "", new { @class = "text-danger"
                            })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientGender, htmlAttributes: new { @class =
                        "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ClientGender, new List<SelectListItem> {
                            new SelectListItem { Text="Male", Value="M" },
                            new SelectListItem { Text="Female", Value="F" },
                            new SelectListItem { Text="Other", Value="O" }
                            }, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Register" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                }
                <script>
                    const input = document.getElementById("selectAvatar");
                    const avatar = document.getElementById("avatar");
                    const textArea = document.getElementById("textArea");
                    const hiddenImageBase64 = document.getElementById("hiddenImageBase64");

                    const convertBase64 = (file) => {
                        return new Promise((resolve, reject) => {
                            const fileReader = new FileReader();
                            fileReader.readAsDataURL(file);

                            fileReader.onload = () => {
                                resolve(fileReader.result);
                            };

                            fileReader.onerror = (error) => {
                                reject(error);
                            };
                        });
                    };

                    const uploadImage = async (event) => {
                        const file = event.target.files[0];
                        const base64 = await convertBase64(file);
                        avatar.src = base64;
                        textArea.innerText = base64;
                        hiddenImageBase64.value = base64;
                    };

                    input.addEventListener("change", (e) => {
                        uploadImage(e);
                    });
                </script>
            </div>
        </div>
    </div>
</body>